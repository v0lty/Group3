// <auto-generated />
using System;
using Group3.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Group3.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220812124126_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Group3.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "7642140c-1b2b-4663-83a4-494092c66243",
                            ConcurrencyStamp = "0c0e909b-93af-4ffa-b80b-33d3a64bc31d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "35f10757-9f14-4820-82aa-c7a9ca46d8bd",
                            ConcurrencyStamp = "bc8a8ca7-83bd-4dc9-b441-5ab115d860f8",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "97a47ef5-e921-4544-a4a7-6096ce6c5179",
                            ConcurrencyStamp = "321e6744-2556-48e7-88d4-f254e42e1745",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        });
                });

            modelBuilder.Entity("Group3.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "d4e62ec9-f879-4769-94e3-e75fa629a655",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1964, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "66837417-3b0c-43ad-9337-aab40f64d602",
                            Email = "admin@fakemail.net",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            Location = "America",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@FAKEMAIL.NET",
                            NormalizedUserName = "ADMIN@FAKEMAIL.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEFQdC3bCujmhIimzpFSzXIhnO++SkBuiD7mgVWH1W7IJA3fePab8MDPVxTTGaVT7dQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b0e83e5d-ce30-4969-93b6-5d339c71c8de",
                            TwoFactorEnabled = false,
                            UserName = "admin@fakemail.net"
                        },
                        new
                        {
                            Id = "516379bb-5732-48ed-9e24-698188fe243c",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1993, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "58814527-dca3-4c37-9b47-ce088bff2888",
                            Email = "sara@fakemail.net",
                            EmailConfirmed = false,
                            FirstName = "Sara",
                            LastName = "Svensson",
                            Location = "Danmark",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARA@FAKEMAIL.NET",
                            NormalizedUserName = "SARA@FAKEMAIL.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEK4qgSezvYmR77QSllSsHKSOJC967SQPMReu2g1CMpUQgvb5H2bbRHT/mQZFYsYbxw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "59dbd765-9d38-468b-815e-f2b9b53bea6e",
                            TwoFactorEnabled = false,
                            UserName = "sara@fakemail.net"
                        },
                        new
                        {
                            Id = "0e4ebb9a-a896-435b-ba7c-99aebc7bf41c",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1985, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "5bad8123-e46f-4fe5-9e7c-5658b4dde69f",
                            Email = "bertil@fakemail.net",
                            EmailConfirmed = false,
                            FirstName = "Bertil",
                            LastName = "Johansson",
                            Location = "Sweden",
                            LockoutEnabled = false,
                            NormalizedEmail = "BERTIL@FAKEMAIL.NET",
                            NormalizedUserName = "BERTIL@FAKEMAIL.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAELDbirMYslArOvmd1MOn6SgwSMb1TvGYdfSB32lHpZmMJ53HdMhb0VzwsJGztw0snQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae1b4393-e0d4-4815-884c-3eddb9084310",
                            TwoFactorEnabled = false,
                            UserName = "bertil@fakemail.net"
                        });
                });

            modelBuilder.Entity("Group3.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "d4e62ec9-f879-4769-94e3-e75fa629a655",
                            RoleId = "7642140c-1b2b-4663-83a4-494092c66243"
                        },
                        new
                        {
                            UserId = "516379bb-5732-48ed-9e24-698188fe243c",
                            RoleId = "35f10757-9f14-4820-82aa-c7a9ca46d8bd"
                        },
                        new
                        {
                            UserId = "0e4ebb9a-a896-435b-ba7c-99aebc7bf41c",
                            RoleId = "97a47ef5-e921-4544-a4a7-6096ce6c5179"
                        });
                });

            modelBuilder.Entity("Group3.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("UserGroup")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Description = "Breaking news here!",
                            Name = "News",
                            UserGroup = false
                        },
                        new
                        {
                            Id = -2,
                            Description = "Javascript, React and more.",
                            Name = "Frontend",
                            UserGroup = false
                        },
                        new
                        {
                            Id = -3,
                            Description = "C++ and C#",
                            Name = "Backend",
                            UserGroup = false
                        },
                        new
                        {
                            Id = -4,
                            Description = "En grupp av testare.",
                            Name = "Testgruppen",
                            UserGroup = true
                        });
                });

            modelBuilder.Entity("Group3.Models.Chat", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserId", "MessageId");

                    b.HasIndex("MessageId");

                    b.ToTable("Chats");

                    b.HasData(
                        new
                        {
                            UserId = "d4e62ec9-f879-4769-94e3-e75fa629a655",
                            MessageId = -1,
                            Id = -1
                        },
                        new
                        {
                            UserId = "516379bb-5732-48ed-9e24-698188fe243c",
                            MessageId = -1,
                            Id = -1
                        },
                        new
                        {
                            UserId = "0e4ebb9a-a896-435b-ba7c-99aebc7bf41c",
                            MessageId = -1,
                            Id = -1
                        },
                        new
                        {
                            UserId = "d4e62ec9-f879-4769-94e3-e75fa629a655",
                            MessageId = -2,
                            Id = -1
                        },
                        new
                        {
                            UserId = "516379bb-5732-48ed-9e24-698188fe243c",
                            MessageId = -2,
                            Id = -1
                        },
                        new
                        {
                            UserId = "0e4ebb9a-a896-435b-ba7c-99aebc7bf41c",
                            MessageId = -2,
                            Id = -1
                        },
                        new
                        {
                            UserId = "d4e62ec9-f879-4769-94e3-e75fa629a655",
                            MessageId = -3,
                            Id = -2
                        },
                        new
                        {
                            UserId = "516379bb-5732-48ed-9e24-698188fe243c",
                            MessageId = -3,
                            Id = -2
                        },
                        new
                        {
                            UserId = "0e4ebb9a-a896-435b-ba7c-99aebc7bf41c",
                            MessageId = -3,
                            Id = -2
                        },
                        new
                        {
                            UserId = "d4e62ec9-f879-4769-94e3-e75fa629a655",
                            MessageId = -4,
                            Id = -2
                        },
                        new
                        {
                            UserId = "516379bb-5732-48ed-9e24-698188fe243c",
                            MessageId = -4,
                            Id = -2
                        },
                        new
                        {
                            UserId = "0e4ebb9a-a896-435b-ba7c-99aebc7bf41c",
                            MessageId = -4,
                            Id = -2
                        },
                        new
                        {
                            UserId = "516379bb-5732-48ed-9e24-698188fe243c",
                            MessageId = -5,
                            Id = -3
                        },
                        new
                        {
                            UserId = "0e4ebb9a-a896-435b-ba7c-99aebc7bf41c",
                            MessageId = -5,
                            Id = -3
                        });
                });

            modelBuilder.Entity("Group3.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AurthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(10000);

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AurthorId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AurthorId = "d4e62ec9-f879-4769-94e3-e75fa629a655",
                            Text = "Hello Sara and Bertil my name is John!",
                            Time = new DateTime(2022, 8, 9, 14, 41, 25, 757, DateTimeKind.Local).AddTicks(9611)
                        },
                        new
                        {
                            Id = -2,
                            AurthorId = "516379bb-5732-48ed-9e24-698188fe243c",
                            Text = "Hello John!",
                            Time = new DateTime(2022, 8, 10, 14, 41, 25, 758, DateTimeKind.Local).AddTicks(54)
                        },
                        new
                        {
                            Id = -3,
                            AurthorId = "0e4ebb9a-a896-435b-ba7c-99aebc7bf41c",
                            Text = "What's up??",
                            Time = new DateTime(2022, 8, 11, 14, 41, 25, 758, DateTimeKind.Local).AddTicks(73)
                        },
                        new
                        {
                            Id = -4,
                            AurthorId = "d4e62ec9-f879-4769-94e3-e75fa629a655",
                            Text = "Umm..",
                            Time = new DateTime(2022, 8, 11, 14, 41, 25, 758, DateTimeKind.Local).AddTicks(76)
                        },
                        new
                        {
                            Id = -5,
                            AurthorId = "0e4ebb9a-a896-435b-ba7c-99aebc7bf41c",
                            Text = "Message from Bertil to Sara",
                            Time = new DateTime(2022, 8, 11, 14, 41, 25, 758, DateTimeKind.Local).AddTicks(78)
                        });
                });

            modelBuilder.Entity("Group3.Models.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Pictures");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Path = "admin@fakemail.net/picture1.jpg",
                            UserId = "d4e62ec9-f879-4769-94e3-e75fa629a655"
                        },
                        new
                        {
                            Id = -2,
                            Path = "sara@fakemail.net/picture2.jpg",
                            UserId = "516379bb-5732-48ed-9e24-698188fe243c"
                        },
                        new
                        {
                            Id = -3,
                            Path = "admin@fakemail.net/picture3.jpg",
                            UserId = "0e4ebb9a-a896-435b-ba7c-99aebc7bf41c"
                        });
                });

            modelBuilder.Entity("Group3.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AurthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Reports")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(10000);

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("Votes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AurthorId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AurthorId = "516379bb-5732-48ed-9e24-698188fe243c",
                            Reports = 0,
                            SubjectId = -2,
                            Text = "Is this version any good?",
                            Time = new DateTime(2022, 8, 10, 14, 41, 25, 756, DateTimeKind.Local).AddTicks(490),
                            Votes = 1
                        },
                        new
                        {
                            Id = -2,
                            AurthorId = "d4e62ec9-f879-4769-94e3-e75fa629a655",
                            Reports = 2,
                            SubjectId = -2,
                            Text = "Maybe, but I'll stick with 2019!",
                            Time = new DateTime(2022, 8, 11, 14, 41, 25, 757, DateTimeKind.Local).AddTicks(7767),
                            Votes = 0
                        },
                        new
                        {
                            Id = -3,
                            AurthorId = "d4e62ec9-f879-4769-94e3-e75fa629a655",
                            Reports = 0,
                            SubjectId = -1,
                            Text = "How do I make a <b>table?</b>",
                            Time = new DateTime(2022, 8, 7, 14, 41, 25, 757, DateTimeKind.Local).AddTicks(7917),
                            Votes = 3
                        },
                        new
                        {
                            Id = -4,
                            AurthorId = "516379bb-5732-48ed-9e24-698188fe243c",
                            Reports = 1,
                            SubjectId = -1,
                            Text = "I dont know..",
                            Time = new DateTime(2022, 8, 8, 14, 41, 25, 757, DateTimeKind.Local).AddTicks(7922),
                            Votes = 0
                        },
                        new
                        {
                            Id = -5,
                            AurthorId = "0e4ebb9a-a896-435b-ba7c-99aebc7bf41c",
                            Reports = 0,
                            SubjectId = -1,
                            Text = "Me neither..",
                            Time = new DateTime(2022, 8, 12, 11, 41, 25, 757, DateTimeKind.Local).AddTicks(7925),
                            Votes = 1
                        },
                        new
                        {
                            Id = -6,
                            AurthorId = "516379bb-5732-48ed-9e24-698188fe243c",
                            Reports = 0,
                            SubjectId = -3,
                            Text = "WoW first post?!?",
                            Time = new DateTime(2019, 8, 12, 14, 41, 25, 757, DateTimeKind.Local).AddTicks(7957),
                            Votes = 1
                        },
                        new
                        {
                            Id = -7,
                            AurthorId = "d4e62ec9-f879-4769-94e3-e75fa629a655",
                            EventDate = new DateTime(2022, 8, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            Reports = 0,
                            SubjectId = -4,
                            Text = "Site launch.<br><br>Day for site launch. We will see if it is possible to host the site on freeasphosting.net",
                            Time = new DateTime(2022, 8, 5, 14, 41, 25, 757, DateTimeKind.Local).AddTicks(7982),
                            Votes = 0
                        },
                        new
                        {
                            Id = -8,
                            AurthorId = "d4e62ec9-f879-4769-94e3-e75fa629a655",
                            EventDate = new DateTime(2022, 8, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            Reports = 0,
                            SubjectId = -5,
                            Text = "Site presentation.<br><br>Day for presentation. Our project was to create a community portal for an organization, including a news feed, events, member lists and discussion forums. ",
                            Time = new DateTime(2022, 8, 5, 14, 41, 25, 757, DateTimeKind.Local).AddTicks(8282),
                            Votes = 0
                        });
                });

            modelBuilder.Entity("Group3.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AurthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AurthorId");

                    b.HasIndex("TopicId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AurthorId = "d4e62ec9-f879-4769-94e3-e75fa629a655",
                            Name = "HTML Tables?",
                            TopicId = -2
                        },
                        new
                        {
                            Id = -2,
                            AurthorId = "516379bb-5732-48ed-9e24-698188fe243c",
                            Name = "Visual Studio 2022",
                            TopicId = -1
                        },
                        new
                        {
                            Id = -3,
                            AurthorId = "516379bb-5732-48ed-9e24-698188fe243c",
                            Name = "Am I'm the chosen one?",
                            TopicId = -3
                        },
                        new
                        {
                            Id = -4,
                            AurthorId = "d4e62ec9-f879-4769-94e3-e75fa629a655",
                            Name = "Site launch.",
                            TopicId = -5
                        },
                        new
                        {
                            Id = -5,
                            AurthorId = "d4e62ec9-f879-4769-94e3-e75fa629a655",
                            Name = "Site presentation.",
                            TopicId = -5
                        });
                });

            modelBuilder.Entity("Group3.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AurthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AurthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AurthorId = "d4e62ec9-f879-4769-94e3-e75fa629a655",
                            CategoryId = -1,
                            Description = "What's hot right now?",
                            Name = "Trending"
                        },
                        new
                        {
                            Id = -2,
                            AurthorId = "d4e62ec9-f879-4769-94e3-e75fa629a655",
                            CategoryId = -2,
                            Description = "Tag TAG <b>TAG!</b>",
                            Name = "HTML"
                        },
                        new
                        {
                            Id = -3,
                            AurthorId = "516379bb-5732-48ed-9e24-698188fe243c",
                            CategoryId = -2,
                            Description = "The necessary evil?",
                            Name = "CSS"
                        },
                        new
                        {
                            Id = -4,
                            AurthorId = "516379bb-5732-48ed-9e24-698188fe243c",
                            CategoryId = -3,
                            Description = "Because SQL is even worse.",
                            Name = "Entity Framework"
                        },
                        new
                        {
                            Id = -5,
                            AurthorId = "d4e62ec9-f879-4769-94e3-e75fa629a655",
                            CategoryId = -1,
                            Description = "Planned occasions.",
                            Name = "Events"
                        });
                });

            modelBuilder.Entity("Group3.Models.UserGroupEnlistment", b =>
                {
                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("UserGroupEnlistmentID")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserID", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("UserGroupEnlistments");

                    b.HasData(
                        new
                        {
                            ApplicationUserID = "516379bb-5732-48ed-9e24-698188fe243c",
                            CategoryId = -4,
                            UserGroupEnlistmentID = -1
                        },
                        new
                        {
                            ApplicationUserID = "0e4ebb9a-a896-435b-ba7c-99aebc7bf41c",
                            CategoryId = -4,
                            UserGroupEnlistmentID = -2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Group3.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("Group3.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.Chat", b =>
                {
                    b.HasOne("Group3.Models.Message", "Message")
                        .WithMany("Chats")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany("Chats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.Message", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "Aurthor")
                        .WithMany()
                        .HasForeignKey("AurthorId");
                });

            modelBuilder.Entity("Group3.Models.Picture", b =>
                {
                    b.HasOne("Group3.Models.Post", null)
                        .WithMany("Pictures")
                        .HasForeignKey("PostId");

                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany("Pictures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Group3.Models.Post", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "Aurthor")
                        .WithMany("Posts")
                        .HasForeignKey("AurthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Group3.Models.Subject", "Subject")
                        .WithMany("Posts")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.Subject", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "Aurthor")
                        .WithMany()
                        .HasForeignKey("AurthorId");

                    b.HasOne("Group3.Models.Topic", "Topic")
                        .WithMany("Subjects")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.Topic", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "Aurthor")
                        .WithMany()
                        .HasForeignKey("AurthorId");

                    b.HasOne("Group3.Models.Category", "Category")
                        .WithMany("Topics")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.UserGroupEnlistment", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserGroupEnlistments")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Group3.Models.Category", "Category")
                        .WithMany("UserGroupEnlistments")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
