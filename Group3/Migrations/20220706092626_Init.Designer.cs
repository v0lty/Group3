// <auto-generated />
using System;
using Group3.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Group3.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220706092626_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Group3.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "00fe3799-418d-42dc-888f-f01c84fbb94e",
                            ConcurrencyStamp = "37e95675-3d92-44bf-8d8a-778bdb9b5916",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "53194d96-7e44-45a8-9475-906cc30ad0ba",
                            ConcurrencyStamp = "768658a1-0725-44b6-908d-f221e8ce6c99",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Group3.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "26f03524-8c47-4581-9540-cd5714d6d503",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1964, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "fbaebcb9-61be-4406-9649-a43d61d5ecae",
                            Email = "admin@fakemail.net",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@FAKEMAIL.NET",
                            NormalizedUserName = "ADMIN@FAKEMAIL.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEHSTzL1SS4mCKISsaN++XuhJ5ncQ0M5h3n+MtDC3qzu2UhpBAv3qaaxMh/gXIDxo0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "49ec0080-eadd-4735-ab7c-1e040f95b749",
                            TwoFactorEnabled = false,
                            UserName = "admin@fakemail.net"
                        },
                        new
                        {
                            Id = "cd2fbc12-ec6f-4261-8378-45481805ae11",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1993, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "74c88546-bde1-48f8-aec6-f9c56b32ca38",
                            Email = "user@fakemail.net",
                            EmailConfirmed = false,
                            FirstName = "Johan",
                            LastName = "Svensson",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@FAKEMAIL.NET",
                            NormalizedUserName = "USER@FAKEMAIL.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEDgt1NNshKK9E47bhRRxdjbAwwEAu53UQPzTfl5NRVTJ1f4Z4cbFpaHSCR+KJE7ilA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b872e466-e8b4-4c03-a549-6a1931ffc7e5",
                            TwoFactorEnabled = false,
                            UserName = "user@fakemail.net"
                        });
                });

            modelBuilder.Entity("Group3.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "26f03524-8c47-4581-9540-cd5714d6d503",
                            RoleId = "00fe3799-418d-42dc-888f-f01c84fbb94e"
                        },
                        new
                        {
                            UserId = "cd2fbc12-ec6f-4261-8378-45481805ae11",
                            RoleId = "53194d96-7e44-45a8-9475-906cc30ad0ba"
                        });
                });

            modelBuilder.Entity("Group3.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "2be600fc-fa7c-4e08-ac8f-c8217bd2cb42",
                            Name = "News"
                        },
                        new
                        {
                            Id = "9e2e9f4e-abf2-43af-9b89-48fe9e63ea78",
                            Name = "Frontend"
                        });
                });

            modelBuilder.Entity("Group3.Models.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(10000);

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = "49faa65a-d116-4767-b668-2153fb3c6bd6",
                            ReceiverId = "cd2fbc12-ec6f-4261-8378-45481805ae11",
                            Text = "Hello there",
                            Time = new DateTime(2022, 7, 3, 11, 26, 26, 580, DateTimeKind.Local).AddTicks(8713),
                            UserId = "26f03524-8c47-4581-9540-cd5714d6d503"
                        },
                        new
                        {
                            Id = "d63f79bc-e40c-4a73-96af-c36a9250e50a",
                            ReceiverId = "26f03524-8c47-4581-9540-cd5714d6d503",
                            Text = "Hello yourself",
                            Time = new DateTime(2022, 6, 27, 11, 26, 26, 580, DateTimeKind.Local).AddTicks(8876),
                            UserId = "cd2fbc12-ec6f-4261-8378-45481805ae11"
                        });
                });

            modelBuilder.Entity("Group3.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(10000);

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("TopicId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = "2cc189e8-f576-4762-a3cf-5bd781fb2172",
                            Text = "<b>Visual Studio 6.0</b> news news news more news",
                            Time = new DateTime(2022, 7, 5, 11, 26, 26, 579, DateTimeKind.Local).AddTicks(3476),
                            TopicId = "bd2321ec-13db-43da-9d6c-2d101a5034fe",
                            UserId = "cd2fbc12-ec6f-4261-8378-45481805ae11"
                        },
                        new
                        {
                            Id = "ed682cc0-86ba-4ee0-bbfa-bfe75365703f",
                            Text = "What is header for?",
                            Time = new DateTime(2022, 7, 4, 11, 26, 26, 580, DateTimeKind.Local).AddTicks(7852),
                            TopicId = "66f2a57c-656f-4481-98b1-fb1097296514",
                            UserId = "26f03524-8c47-4581-9540-cd5714d6d503"
                        },
                        new
                        {
                            Id = "8561c670-9786-458f-9d84-b8c3ec1932c9",
                            ReferenceId = "ed682cc0-86ba-4ee0-bbfa-bfe75365703f",
                            Text = "HoW do I make a table?",
                            Time = new DateTime(2022, 7, 1, 11, 26, 26, 580, DateTimeKind.Local).AddTicks(8118),
                            TopicId = "66f2a57c-656f-4481-98b1-fb1097296514",
                            UserId = "26f03524-8c47-4581-9540-cd5714d6d503"
                        });
                });

            modelBuilder.Entity("Group3.Models.Topic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = "bd2321ec-13db-43da-9d6c-2d101a5034fe",
                            CategoryId = "2be600fc-fa7c-4e08-ac8f-c8217bd2cb42",
                            Description = "Upgrade your project to 6.0",
                            Name = "Trending",
                            UserId = "26f03524-8c47-4581-9540-cd5714d6d503"
                        },
                        new
                        {
                            Id = "66f2a57c-656f-4481-98b1-fb1097296514",
                            CategoryId = "9e2e9f4e-abf2-43af-9b89-48fe9e63ea78",
                            Description = "What ever about HTML",
                            Name = "HTML",
                            UserId = "cd2fbc12-ec6f-4261-8378-45481805ae11"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Group3.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("Group3.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.Message", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Group3.Models.Post", b =>
                {
                    b.HasOne("Group3.Models.Post", "Reference")
                        .WithMany()
                        .HasForeignKey("ReferenceId");

                    b.HasOne("Group3.Models.Topic", "Topic")
                        .WithMany("Posts")
                        .HasForeignKey("TopicId");

                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Group3.Models.Topic", b =>
                {
                    b.HasOne("Group3.Models.Category", "Category")
                        .WithMany("Topics")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
