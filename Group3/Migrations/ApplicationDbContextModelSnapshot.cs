// <auto-generated />
using System;
using Group3.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Group3.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Group3.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "c4db8954-4ef2-4925-bc85-cc1b9368c0f1",
                            ConcurrencyStamp = "05c3564e-0f2f-43b0-b4ee-0cc8f4567ee2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "87f9f677-3346-412c-8497-ca9e2aa70806",
                            ConcurrencyStamp = "db5db423-d02d-4c20-9c96-5a4a6b48d3c2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Group3.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "9618b24c-c9dd-458a-9160-cb222bc8fd29",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1964, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "9c66dc33-62b7-4f53-b770-8272f61111f7",
                            Email = "admin@fakemail.net",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@FAKEMAIL.NET",
                            NormalizedUserName = "ADMIN@FAKEMAIL.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEK/j70VbSE8CV0V4r5DdLZei5RmyeJwKPr5chDwSx4qyBxlUDZopzaGiTSfmVisC+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d34da9d-e054-4073-b7ef-68cb4643cd59",
                            TwoFactorEnabled = false,
                            UserName = "admin@fakemail.net"
                        },
                        new
                        {
                            Id = "40574de4-256f-4172-a60f-c46738c57554",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1993, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "04611645-f52c-4f97-949d-77f82bb68003",
                            Email = "sara@fakemail.net",
                            EmailConfirmed = false,
                            FirstName = "Sara",
                            LastName = "Svensson",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARA@FAKEMAIL.NET",
                            NormalizedUserName = "SARA@FAKEMAIL.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAED1ZSxmYT/BG8FTYTfBdU5N02SVbHlnT7hbq9dDPuh4f34DP2HkzXJlA+64ifwXL/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63d965b1-acf9-402e-8352-900843611a37",
                            TwoFactorEnabled = false,
                            UserName = "sara@fakemail.net"
                        },
                        new
                        {
                            Id = "918a1403-62dd-49b4-b2ae-b481f2e6ccc9",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1985, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4803c717-5243-4cea-899e-ceffe35a4e25",
                            Email = "bertil@fakemail.net",
                            EmailConfirmed = false,
                            FirstName = "Bertil",
                            LastName = "Johansson",
                            LockoutEnabled = false,
                            NormalizedEmail = "BERTIL@FAKEMAIL.NET",
                            NormalizedUserName = "BERTIL@FAKEMAIL.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEFZyCMmiJZVDrC5DLYCNE+nH6URlix0I5AHqTvpWU7Ujw9LfPSuk2sIu+hnwGXpMTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4cfebd8c-5d5a-4b22-9717-cf6485a91d70",
                            TwoFactorEnabled = false,
                            UserName = "bertil@fakemail.net"
                        });
                });

            modelBuilder.Entity("Group3.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "9618b24c-c9dd-458a-9160-cb222bc8fd29",
                            RoleId = "c4db8954-4ef2-4925-bc85-cc1b9368c0f1"
                        },
                        new
                        {
                            UserId = "40574de4-256f-4172-a60f-c46738c57554",
                            RoleId = "87f9f677-3346-412c-8497-ca9e2aa70806"
                        },
                        new
                        {
                            UserId = "918a1403-62dd-49b4-b2ae-b481f2e6ccc9",
                            RoleId = "87f9f677-3346-412c-8497-ca9e2aa70806"
                        });
                });

            modelBuilder.Entity("Group3.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "News"
                        },
                        new
                        {
                            Id = -2,
                            Name = "Frontend"
                        },
                        new
                        {
                            Id = -3,
                            Name = "Backend"
                        },
                        new
                        {
                            Id = -4,
                            Name = "Random"
                        });
                });

            modelBuilder.Entity("Group3.Models.Chat", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("UserId", "MessageId");

                    b.HasIndex("MessageId");

                    b.ToTable("Chats");

                    b.HasData(
                        new
                        {
                            UserId = "9618b24c-c9dd-458a-9160-cb222bc8fd29",
                            MessageId = -1,
                            Id = -1
                        },
                        new
                        {
                            UserId = "40574de4-256f-4172-a60f-c46738c57554",
                            MessageId = -1,
                            Id = -1
                        },
                        new
                        {
                            UserId = "918a1403-62dd-49b4-b2ae-b481f2e6ccc9",
                            MessageId = -1,
                            Id = -1
                        },
                        new
                        {
                            UserId = "9618b24c-c9dd-458a-9160-cb222bc8fd29",
                            MessageId = -2,
                            Id = -1
                        },
                        new
                        {
                            UserId = "40574de4-256f-4172-a60f-c46738c57554",
                            MessageId = -2,
                            Id = -1
                        },
                        new
                        {
                            UserId = "918a1403-62dd-49b4-b2ae-b481f2e6ccc9",
                            MessageId = -2,
                            Id = -1
                        },
                        new
                        {
                            UserId = "9618b24c-c9dd-458a-9160-cb222bc8fd29",
                            MessageId = -3,
                            Id = -2
                        },
                        new
                        {
                            UserId = "40574de4-256f-4172-a60f-c46738c57554",
                            MessageId = -3,
                            Id = -2
                        },
                        new
                        {
                            UserId = "918a1403-62dd-49b4-b2ae-b481f2e6ccc9",
                            MessageId = -3,
                            Id = -2
                        },
                        new
                        {
                            UserId = "9618b24c-c9dd-458a-9160-cb222bc8fd29",
                            MessageId = -4,
                            Id = -2
                        },
                        new
                        {
                            UserId = "40574de4-256f-4172-a60f-c46738c57554",
                            MessageId = -4,
                            Id = -2
                        },
                        new
                        {
                            UserId = "918a1403-62dd-49b4-b2ae-b481f2e6ccc9",
                            MessageId = -4,
                            Id = -2
                        },
                        new
                        {
                            UserId = "40574de4-256f-4172-a60f-c46738c57554",
                            MessageId = -5,
                            Id = -3
                        },
                        new
                        {
                            UserId = "918a1403-62dd-49b4-b2ae-b481f2e6ccc9",
                            MessageId = -5,
                            Id = -3
                        });
                });

            modelBuilder.Entity("Group3.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AurthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(10000);

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AurthorId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AurthorId = "9618b24c-c9dd-458a-9160-cb222bc8fd29",
                            Text = "Hello Sara and Bertil my name is John!",
                            Time = new DateTime(2022, 7, 30, 9, 49, 14, 968, DateTimeKind.Local).AddTicks(2808)
                        },
                        new
                        {
                            Id = -2,
                            AurthorId = "40574de4-256f-4172-a60f-c46738c57554",
                            Text = "Hello John!",
                            Time = new DateTime(2022, 7, 31, 9, 49, 14, 968, DateTimeKind.Local).AddTicks(3638)
                        },
                        new
                        {
                            Id = -3,
                            AurthorId = "918a1403-62dd-49b4-b2ae-b481f2e6ccc9",
                            Text = "What's up??",
                            Time = new DateTime(2022, 8, 1, 9, 49, 14, 968, DateTimeKind.Local).AddTicks(3667)
                        },
                        new
                        {
                            Id = -4,
                            AurthorId = "9618b24c-c9dd-458a-9160-cb222bc8fd29",
                            Text = "Umm..",
                            Time = new DateTime(2022, 8, 1, 9, 49, 14, 968, DateTimeKind.Local).AddTicks(3671)
                        },
                        new
                        {
                            Id = -5,
                            AurthorId = "918a1403-62dd-49b4-b2ae-b481f2e6ccc9",
                            Text = "Message from Bertil to Sara",
                            Time = new DateTime(2022, 8, 1, 9, 49, 14, 968, DateTimeKind.Local).AddTicks(3675)
                        });
                });

            modelBuilder.Entity("Group3.Models.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Pictures");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Path = "Pictures/admin@fakemail.net/picture1.jpg",
                            UserId = "9618b24c-c9dd-458a-9160-cb222bc8fd29"
                        },
                        new
                        {
                            Id = -2,
                            Path = "Pictures/sara@fakemail.net/abc.jpg",
                            UserId = "40574de4-256f-4172-a60f-c46738c57554"
                        },
                        new
                        {
                            Id = -3,
                            Path = "Pictures/admin@fakemail.net/postPic1.jpg",
                            PostId = -1,
                            UserId = "9618b24c-c9dd-458a-9160-cb222bc8fd29"
                        },
                        new
                        {
                            Id = -4,
                            Path = "Pictures/sara@fakemail.net/postPic2.jpg",
                            PostId = -2,
                            UserId = "40574de4-256f-4172-a60f-c46738c57554"
                        });
                });

            modelBuilder.Entity("Group3.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AurthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(10000);

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AurthorId");

                    b.HasIndex("TopicId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AurthorId = "40574de4-256f-4172-a60f-c46738c57554",
                            Text = "<b>Visual Studio 6.0</b> news news news more news",
                            Time = new DateTime(2022, 8, 1, 9, 49, 14, 965, DateTimeKind.Local).AddTicks(8374),
                            TopicId = -1
                        },
                        new
                        {
                            Id = -2,
                            AurthorId = "9618b24c-c9dd-458a-9160-cb222bc8fd29",
                            Text = "My head is empty, should I fill it with something?",
                            Time = new DateTime(2022, 7, 31, 9, 49, 14, 968, DateTimeKind.Local).AddTicks(228),
                            TopicId = -2
                        },
                        new
                        {
                            Id = -3,
                            AurthorId = "9618b24c-c9dd-458a-9160-cb222bc8fd29",
                            Text = "HoW do I make a table?",
                            Time = new DateTime(2022, 7, 28, 9, 49, 14, 968, DateTimeKind.Local).AddTicks(292),
                            TopicId = -2
                        });
                });

            modelBuilder.Entity("Group3.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AurthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AurthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AurthorId = "9618b24c-c9dd-458a-9160-cb222bc8fd29",
                            CategoryId = -1,
                            Description = "Upgrade your project to 6.0",
                            Name = "Trending"
                        },
                        new
                        {
                            Id = -2,
                            AurthorId = "40574de4-256f-4172-a60f-c46738c57554",
                            CategoryId = -2,
                            Description = "What ever about HTML",
                            Name = "HTML"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Group3.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("Group3.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.Chat", b =>
                {
                    b.HasOne("Group3.Models.Message", "Message")
                        .WithMany("Chats")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany("Chats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.Message", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "Aurthor")
                        .WithMany()
                        .HasForeignKey("AurthorId");
                });

            modelBuilder.Entity("Group3.Models.Picture", b =>
                {
                    b.HasOne("Group3.Models.Post", "Post")
                        .WithMany("Pictures")
                        .HasForeignKey("PostId");

                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany("Pictures")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Group3.Models.Post", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "Aurthor")
                        .WithMany("Posts")
                        .HasForeignKey("AurthorId");

                    b.HasOne("Group3.Models.Topic", "Topic")
                        .WithMany("Posts")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.Topic", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "Aurthor")
                        .WithMany()
                        .HasForeignKey("AurthorId");

                    b.HasOne("Group3.Models.Category", "Category")
                        .WithMany("Topics")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
