// <auto-generated />
using System;
using Group3.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Group3.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Group3.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "40c4d4ba-4fa8-4737-baf3-67362b9b38e1",
                            ConcurrencyStamp = "51420529-ca66-451b-be71-1c96367aa0af",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3c8871d3-80c1-4c59-8765-3f178c555363",
                            ConcurrencyStamp = "0e69fcbf-f57d-47c6-8018-7b4485548502",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "03cfe276-8dca-4e40-a7a2-62b648a4bc2b",
                            ConcurrencyStamp = "aaf93f48-d55f-470c-9d8c-a04cd3024445",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        });
                });

            modelBuilder.Entity("Group3.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "0547cf46-6c54-4fd3-9514-84a4a5957d05",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1964, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "fb72d712-967c-4735-8276-c1fe98086f03",
                            Email = "admin@fakemail.net",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            Location = "America",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@FAKEMAIL.NET",
                            NormalizedUserName = "ADMIN@FAKEMAIL.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAECSmbRW2vAuUkmcGWHTaPoAncogIkZK5KPS92d1vzb+r0bVlPLM+A8satVVVyHjYBw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42736075-4ea3-42ec-98e5-edf18432eaa6",
                            TwoFactorEnabled = false,
                            UserName = "admin@fakemail.net"
                        },
                        new
                        {
                            Id = "8d23c851-bb82-4801-b3b3-86cd8f583c83",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1993, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a7544835-11bd-47c6-993c-7674e1f34819",
                            Email = "sara@fakemail.net",
                            EmailConfirmed = false,
                            FirstName = "Sara",
                            LastName = "Svensson",
                            Location = "Danmark",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARA@FAKEMAIL.NET",
                            NormalizedUserName = "SARA@FAKEMAIL.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEN+q6Os/o1AVcy/ynsgvSdVbXFefuXji7SbEN/czmZeQYuehJYZ9gM5GMkAvn7priw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0fc2924-1012-498b-b61a-74f03e38ed9a",
                            TwoFactorEnabled = false,
                            UserName = "sara@fakemail.net"
                        },
                        new
                        {
                            Id = "99a0b0b7-28f7-42ec-ad27-b08a772a6682",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1985, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "5d57108a-a7b1-457a-b2aa-2d7fdaa68d06",
                            Email = "bertil@fakemail.net",
                            EmailConfirmed = false,
                            FirstName = "Bertil",
                            LastName = "Johansson",
                            Location = "Sweden",
                            LockoutEnabled = false,
                            NormalizedEmail = "BERTIL@FAKEMAIL.NET",
                            NormalizedUserName = "BERTIL@FAKEMAIL.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEE0leUmXpRaLnefIvfm8cDNNDCYRsNlh3sG6R03nbagh2snm1Z16DoWkWkJQOtfmtg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "88217b38-b6ea-4e9c-a574-301cb8dad952",
                            TwoFactorEnabled = false,
                            UserName = "bertil@fakemail.net"
                        });
                });

            modelBuilder.Entity("Group3.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "0547cf46-6c54-4fd3-9514-84a4a5957d05",
                            RoleId = "40c4d4ba-4fa8-4737-baf3-67362b9b38e1"
                        },
                        new
                        {
                            UserId = "8d23c851-bb82-4801-b3b3-86cd8f583c83",
                            RoleId = "3c8871d3-80c1-4c59-8765-3f178c555363"
                        },
                        new
                        {
                            UserId = "99a0b0b7-28f7-42ec-ad27-b08a772a6682",
                            RoleId = "03cfe276-8dca-4e40-a7a2-62b648a4bc2b"
                        });
                });

            modelBuilder.Entity("Group3.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Description = "Breaking news here!",
                            Name = "News"
                        },
                        new
                        {
                            Id = -2,
                            Description = "Javascript, React and more.",
                            Name = "Frontend"
                        },
                        new
                        {
                            Id = -3,
                            Description = "C++ and C#",
                            Name = "Backend"
                        });
                });

            modelBuilder.Entity("Group3.Models.Chat", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserId", "MessageId");

                    b.HasIndex("MessageId");

                    b.ToTable("Chats");

                    b.HasData(
                        new
                        {
                            UserId = "0547cf46-6c54-4fd3-9514-84a4a5957d05",
                            MessageId = -1,
                            Id = -1
                        },
                        new
                        {
                            UserId = "8d23c851-bb82-4801-b3b3-86cd8f583c83",
                            MessageId = -1,
                            Id = -1
                        },
                        new
                        {
                            UserId = "99a0b0b7-28f7-42ec-ad27-b08a772a6682",
                            MessageId = -1,
                            Id = -1
                        },
                        new
                        {
                            UserId = "0547cf46-6c54-4fd3-9514-84a4a5957d05",
                            MessageId = -2,
                            Id = -1
                        },
                        new
                        {
                            UserId = "8d23c851-bb82-4801-b3b3-86cd8f583c83",
                            MessageId = -2,
                            Id = -1
                        },
                        new
                        {
                            UserId = "99a0b0b7-28f7-42ec-ad27-b08a772a6682",
                            MessageId = -2,
                            Id = -1
                        },
                        new
                        {
                            UserId = "0547cf46-6c54-4fd3-9514-84a4a5957d05",
                            MessageId = -3,
                            Id = -2
                        },
                        new
                        {
                            UserId = "8d23c851-bb82-4801-b3b3-86cd8f583c83",
                            MessageId = -3,
                            Id = -2
                        },
                        new
                        {
                            UserId = "99a0b0b7-28f7-42ec-ad27-b08a772a6682",
                            MessageId = -3,
                            Id = -2
                        },
                        new
                        {
                            UserId = "0547cf46-6c54-4fd3-9514-84a4a5957d05",
                            MessageId = -4,
                            Id = -2
                        },
                        new
                        {
                            UserId = "8d23c851-bb82-4801-b3b3-86cd8f583c83",
                            MessageId = -4,
                            Id = -2
                        },
                        new
                        {
                            UserId = "99a0b0b7-28f7-42ec-ad27-b08a772a6682",
                            MessageId = -4,
                            Id = -2
                        },
                        new
                        {
                            UserId = "8d23c851-bb82-4801-b3b3-86cd8f583c83",
                            MessageId = -5,
                            Id = -3
                        },
                        new
                        {
                            UserId = "99a0b0b7-28f7-42ec-ad27-b08a772a6682",
                            MessageId = -5,
                            Id = -3
                        });
                });

            modelBuilder.Entity("Group3.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AurthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(10000);

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AurthorId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AurthorId = "0547cf46-6c54-4fd3-9514-84a4a5957d05",
                            Text = "Hello Sara and Bertil my name is John!",
                            Time = new DateTime(2022, 8, 9, 10, 4, 28, 301, DateTimeKind.Local).AddTicks(3528)
                        },
                        new
                        {
                            Id = -2,
                            AurthorId = "8d23c851-bb82-4801-b3b3-86cd8f583c83",
                            Text = "Hello John!",
                            Time = new DateTime(2022, 8, 10, 10, 4, 28, 301, DateTimeKind.Local).AddTicks(4075)
                        },
                        new
                        {
                            Id = -3,
                            AurthorId = "99a0b0b7-28f7-42ec-ad27-b08a772a6682",
                            Text = "What's up??",
                            Time = new DateTime(2022, 8, 11, 10, 4, 28, 301, DateTimeKind.Local).AddTicks(4097)
                        },
                        new
                        {
                            Id = -4,
                            AurthorId = "0547cf46-6c54-4fd3-9514-84a4a5957d05",
                            Text = "Umm..",
                            Time = new DateTime(2022, 8, 11, 10, 4, 28, 301, DateTimeKind.Local).AddTicks(4100)
                        },
                        new
                        {
                            Id = -5,
                            AurthorId = "99a0b0b7-28f7-42ec-ad27-b08a772a6682",
                            Text = "Message from Bertil to Sara",
                            Time = new DateTime(2022, 8, 11, 10, 4, 28, 301, DateTimeKind.Local).AddTicks(4103)
                        });
                });

            modelBuilder.Entity("Group3.Models.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Pictures");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Path = "admin@fakemail.net/picture1.jpg",
                            UserId = "0547cf46-6c54-4fd3-9514-84a4a5957d05"
                        },
                        new
                        {
                            Id = -2,
                            Path = "sara@fakemail.net/picture2.jpg",
                            UserId = "8d23c851-bb82-4801-b3b3-86cd8f583c83"
                        },
                        new
                        {
                            Id = -3,
                            Path = "admin@fakemail.net/picture3.jpg",
                            UserId = "99a0b0b7-28f7-42ec-ad27-b08a772a6682"
                        });
                });

            modelBuilder.Entity("Group3.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AurthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Reports")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(10000);

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("Votes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AurthorId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AurthorId = "8d23c851-bb82-4801-b3b3-86cd8f583c83",
                            Reports = 0,
                            SubjectId = -2,
                            Text = "Is this version any good?",
                            Time = new DateTime(2022, 8, 10, 10, 4, 28, 299, DateTimeKind.Local).AddTicks(2354),
                            Votes = 1
                        },
                        new
                        {
                            Id = -2,
                            AurthorId = "0547cf46-6c54-4fd3-9514-84a4a5957d05",
                            Reports = 2,
                            SubjectId = -2,
                            Text = "Maybe, but I'll stick with 2019!",
                            Time = new DateTime(2022, 8, 11, 10, 4, 28, 301, DateTimeKind.Local).AddTicks(1588),
                            Votes = 0
                        },
                        new
                        {
                            Id = -3,
                            AurthorId = "0547cf46-6c54-4fd3-9514-84a4a5957d05",
                            Reports = 0,
                            SubjectId = -1,
                            Text = "How do I make a <b>table?</b>",
                            Time = new DateTime(2022, 8, 7, 10, 4, 28, 301, DateTimeKind.Local).AddTicks(1894),
                            Votes = 3
                        },
                        new
                        {
                            Id = -4,
                            AurthorId = "8d23c851-bb82-4801-b3b3-86cd8f583c83",
                            Reports = 1,
                            SubjectId = -1,
                            Text = "I dont know..",
                            Time = new DateTime(2022, 8, 8, 10, 4, 28, 301, DateTimeKind.Local).AddTicks(1899),
                            Votes = 0
                        },
                        new
                        {
                            Id = -5,
                            AurthorId = "99a0b0b7-28f7-42ec-ad27-b08a772a6682",
                            Reports = 0,
                            SubjectId = -1,
                            Text = "Me neither..",
                            Time = new DateTime(2022, 8, 12, 7, 4, 28, 301, DateTimeKind.Local).AddTicks(1902),
                            Votes = 1
                        },
                        new
                        {
                            Id = -6,
                            AurthorId = "8d23c851-bb82-4801-b3b3-86cd8f583c83",
                            Reports = 0,
                            SubjectId = -3,
                            Text = "WoW first post?!?",
                            Time = new DateTime(2019, 8, 12, 10, 4, 28, 301, DateTimeKind.Local).AddTicks(1920),
                            Votes = 1
                        },
                        new
                        {
                            Id = -7,
                            AurthorId = "0547cf46-6c54-4fd3-9514-84a4a5957d05",
                            EventDate = new DateTime(2022, 8, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            Reports = 0,
                            SubjectId = -4,
                            Text = "Site launch.<br><br>Day for site launch. We will see if it is possible to host the site on freeasphosting.net",
                            Time = new DateTime(2022, 8, 5, 10, 4, 28, 301, DateTimeKind.Local).AddTicks(1944),
                            Votes = 0
                        },
                        new
                        {
                            Id = -8,
                            AurthorId = "0547cf46-6c54-4fd3-9514-84a4a5957d05",
                            EventDate = new DateTime(2022, 8, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            Reports = 0,
                            SubjectId = -5,
                            Text = "Site presentation.<br><br>Day for presentation. Our project was to create a community portal for an organization, including a news feed, events, member lists and discussion forums. ",
                            Time = new DateTime(2022, 8, 5, 10, 4, 28, 301, DateTimeKind.Local).AddTicks(2283),
                            Votes = 0
                        });
                });

            modelBuilder.Entity("Group3.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AurthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AurthorId");

                    b.HasIndex("TopicId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AurthorId = "0547cf46-6c54-4fd3-9514-84a4a5957d05",
                            Name = "HTML Tables?",
                            TopicId = -2
                        },
                        new
                        {
                            Id = -2,
                            AurthorId = "8d23c851-bb82-4801-b3b3-86cd8f583c83",
                            Name = "Visual Studio 2022",
                            TopicId = -1
                        },
                        new
                        {
                            Id = -3,
                            AurthorId = "8d23c851-bb82-4801-b3b3-86cd8f583c83",
                            Name = "Am I'm the chosen one?",
                            TopicId = -3
                        },
                        new
                        {
                            Id = -4,
                            AurthorId = "0547cf46-6c54-4fd3-9514-84a4a5957d05",
                            Name = "Site launch.",
                            TopicId = -5
                        },
                        new
                        {
                            Id = -5,
                            AurthorId = "0547cf46-6c54-4fd3-9514-84a4a5957d05",
                            Name = "Site presentation.",
                            TopicId = -5
                        });
                });

            modelBuilder.Entity("Group3.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AurthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AurthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AurthorId = "0547cf46-6c54-4fd3-9514-84a4a5957d05",
                            CategoryId = -1,
                            Description = "What's hot right now?",
                            Name = "Trending"
                        },
                        new
                        {
                            Id = -2,
                            AurthorId = "0547cf46-6c54-4fd3-9514-84a4a5957d05",
                            CategoryId = -2,
                            Description = "Tag TAG <b>TAG!</b>",
                            Name = "HTML"
                        },
                        new
                        {
                            Id = -3,
                            AurthorId = "8d23c851-bb82-4801-b3b3-86cd8f583c83",
                            CategoryId = -2,
                            Description = "The necessary evil?",
                            Name = "CSS"
                        },
                        new
                        {
                            Id = -4,
                            AurthorId = "8d23c851-bb82-4801-b3b3-86cd8f583c83",
                            CategoryId = -3,
                            Description = "Because SQL is even worse.",
                            Name = "Entity Framework"
                        },
                        new
                        {
                            Id = -5,
                            AurthorId = "0547cf46-6c54-4fd3-9514-84a4a5957d05",
                            CategoryId = -1,
                            Description = "Planned occasions.",
                            Name = "Events"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Group3.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("Group3.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.Chat", b =>
                {
                    b.HasOne("Group3.Models.Message", "Message")
                        .WithMany("Chats")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany("Chats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.Message", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "Aurthor")
                        .WithMany()
                        .HasForeignKey("AurthorId");
                });

            modelBuilder.Entity("Group3.Models.Picture", b =>
                {
                    b.HasOne("Group3.Models.Post", null)
                        .WithMany("Pictures")
                        .HasForeignKey("PostId");

                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany("Pictures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Group3.Models.Post", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "Aurthor")
                        .WithMany("Posts")
                        .HasForeignKey("AurthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Group3.Models.Subject", "Subject")
                        .WithMany("Posts")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.Subject", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "Aurthor")
                        .WithMany()
                        .HasForeignKey("AurthorId");

                    b.HasOne("Group3.Models.Topic", "Topic")
                        .WithMany("Subjects")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.Topic", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "Aurthor")
                        .WithMany()
                        .HasForeignKey("AurthorId");

                    b.HasOne("Group3.Models.Category", "Category")
                        .WithMany("Topics")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
