// <auto-generated />
using System;
using Group3.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Group3.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Group3.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "b8e195ef-24fb-4304-a9b8-f333bc0a49f7",
                            ConcurrencyStamp = "8ddc35d9-8f8b-4e91-a942-99c34ec34154",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "aa95fe5d-440d-4a4a-b910-676f6e1ea3a8",
                            ConcurrencyStamp = "66759ddf-307c-403e-adbb-4bc1172ae7d1",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Group3.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1ddfc41a-8b0e-4dbd-8ef5-f94a552838d4",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1964, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a9f4cf9b-00bc-4bba-b96b-ad0091a56c37",
                            Email = "admin@fakemail.net",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@FAKEMAIL.NET",
                            NormalizedUserName = "ADMIN@FAKEMAIL.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAECcgus/MbC2eqTBXzgFuGTdicg9v9iebBBySfLARZTq9Fr3YRP4mldT1PYym+TdPTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "49240cbf-a7d9-450c-9010-9f281322b380",
                            TwoFactorEnabled = false,
                            UserName = "admin@fakemail.net"
                        },
                        new
                        {
                            Id = "871408aa-5382-4e3c-a6d0-66017d087c00",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1993, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "8547437e-bbd3-4884-8465-c3245d703ac0",
                            Email = "sara@fakemail.net",
                            EmailConfirmed = false,
                            FirstName = "Sara",
                            LastName = "Svensson",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARA@FAKEMAIL.NET",
                            NormalizedUserName = "SARA@FAKEMAIL.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEPrE7BR9n0rIxPSbtKffaf44ekfAOYYzrRGNE+HmHdPPHfsSTUzKzo7PGpbkmgganQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6410fcd7-3fa3-4e0e-b54c-29d344461e55",
                            TwoFactorEnabled = false,
                            UserName = "sara@fakemail.net"
                        },
                        new
                        {
                            Id = "cc194169-e1f2-48f9-8670-eba74673ba60",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1985, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c524d543-9cf3-41b3-ae5e-4baff74fe64f",
                            Email = "bertil@fakemail.net",
                            EmailConfirmed = false,
                            FirstName = "Bertil",
                            LastName = "Johansson",
                            LockoutEnabled = false,
                            NormalizedEmail = "BERTIL@FAKEMAIL.NET",
                            NormalizedUserName = "BERTIL@FAKEMAIL.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEDhm7IAnKAV0KZSiys4f7RLljh/a6KmIDS+wDx5yKz+9mXruOapiqHX6jRwv6gpJJw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "349a6461-8965-4dbb-a398-7f0a84c505e4",
                            TwoFactorEnabled = false,
                            UserName = "bertil@fakemail.net"
                        });
                });

            modelBuilder.Entity("Group3.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1ddfc41a-8b0e-4dbd-8ef5-f94a552838d4",
                            RoleId = "b8e195ef-24fb-4304-a9b8-f333bc0a49f7"
                        },
                        new
                        {
                            UserId = "871408aa-5382-4e3c-a6d0-66017d087c00",
                            RoleId = "aa95fe5d-440d-4a4a-b910-676f6e1ea3a8"
                        },
                        new
                        {
                            UserId = "cc194169-e1f2-48f9-8670-eba74673ba60",
                            RoleId = "aa95fe5d-440d-4a4a-b910-676f6e1ea3a8"
                        });
                });

            modelBuilder.Entity("Group3.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "News"
                        },
                        new
                        {
                            Id = -2,
                            Name = "Frontend"
                        },
                        new
                        {
                            Id = -3,
                            Name = "Backend"
                        },
                        new
                        {
                            Id = -4,
                            Name = "Random"
                        });
                });

            modelBuilder.Entity("Group3.Models.Chat", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("UserId", "MessageId");

                    b.HasIndex("MessageId");

                    b.ToTable("Chats");

                    b.HasData(
                        new
                        {
                            UserId = "1ddfc41a-8b0e-4dbd-8ef5-f94a552838d4",
                            MessageId = -1,
                            Id = -1
                        },
                        new
                        {
                            UserId = "871408aa-5382-4e3c-a6d0-66017d087c00",
                            MessageId = -1,
                            Id = -1
                        },
                        new
                        {
                            UserId = "cc194169-e1f2-48f9-8670-eba74673ba60",
                            MessageId = -1,
                            Id = -1
                        },
                        new
                        {
                            UserId = "1ddfc41a-8b0e-4dbd-8ef5-f94a552838d4",
                            MessageId = -2,
                            Id = -1
                        },
                        new
                        {
                            UserId = "871408aa-5382-4e3c-a6d0-66017d087c00",
                            MessageId = -2,
                            Id = -1
                        },
                        new
                        {
                            UserId = "cc194169-e1f2-48f9-8670-eba74673ba60",
                            MessageId = -2,
                            Id = -1
                        },
                        new
                        {
                            UserId = "1ddfc41a-8b0e-4dbd-8ef5-f94a552838d4",
                            MessageId = -3,
                            Id = -2
                        },
                        new
                        {
                            UserId = "871408aa-5382-4e3c-a6d0-66017d087c00",
                            MessageId = -3,
                            Id = -2
                        },
                        new
                        {
                            UserId = "cc194169-e1f2-48f9-8670-eba74673ba60",
                            MessageId = -3,
                            Id = -2
                        },
                        new
                        {
                            UserId = "1ddfc41a-8b0e-4dbd-8ef5-f94a552838d4",
                            MessageId = -4,
                            Id = -2
                        },
                        new
                        {
                            UserId = "871408aa-5382-4e3c-a6d0-66017d087c00",
                            MessageId = -4,
                            Id = -2
                        },
                        new
                        {
                            UserId = "cc194169-e1f2-48f9-8670-eba74673ba60",
                            MessageId = -4,
                            Id = -2
                        },
                        new
                        {
                            UserId = "871408aa-5382-4e3c-a6d0-66017d087c00",
                            MessageId = -5,
                            Id = -3
                        },
                        new
                        {
                            UserId = "cc194169-e1f2-48f9-8670-eba74673ba60",
                            MessageId = -5,
                            Id = -3
                        });
                });

            modelBuilder.Entity("Group3.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AurthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(10000);

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AurthorId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AurthorId = "1ddfc41a-8b0e-4dbd-8ef5-f94a552838d4",
                            Text = "Hello Sara and Bertil my name is John!",
                            Time = new DateTime(2022, 8, 1, 14, 40, 40, 946, DateTimeKind.Local).AddTicks(7123)
                        },
                        new
                        {
                            Id = -2,
                            AurthorId = "871408aa-5382-4e3c-a6d0-66017d087c00",
                            Text = "Hello John!",
                            Time = new DateTime(2022, 8, 2, 14, 40, 40, 946, DateTimeKind.Local).AddTicks(7569)
                        },
                        new
                        {
                            Id = -3,
                            AurthorId = "cc194169-e1f2-48f9-8670-eba74673ba60",
                            Text = "What's up??",
                            Time = new DateTime(2022, 8, 3, 14, 40, 40, 946, DateTimeKind.Local).AddTicks(7596)
                        },
                        new
                        {
                            Id = -4,
                            AurthorId = "1ddfc41a-8b0e-4dbd-8ef5-f94a552838d4",
                            Text = "Umm..",
                            Time = new DateTime(2022, 8, 3, 14, 40, 40, 946, DateTimeKind.Local).AddTicks(7600)
                        },
                        new
                        {
                            Id = -5,
                            AurthorId = "cc194169-e1f2-48f9-8670-eba74673ba60",
                            Text = "Message from Bertil to Sara",
                            Time = new DateTime(2022, 8, 3, 14, 40, 40, 946, DateTimeKind.Local).AddTicks(7602)
                        });
                });

            modelBuilder.Entity("Group3.Models.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Pictures");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Path = "admin@fakemail.net/picture1.jpg",
                            UserId = "1ddfc41a-8b0e-4dbd-8ef5-f94a552838d4"
                        },
                        new
                        {
                            Id = -2,
                            Path = "sara@fakemail.net/picture2.jpg",
                            UserId = "871408aa-5382-4e3c-a6d0-66017d087c00"
                        },
                        new
                        {
                            Id = -3,
                            Path = "admin@fakemail.net/picture3.jpg",
                            PostId = -1,
                            UserId = "1ddfc41a-8b0e-4dbd-8ef5-f94a552838d4"
                        },
                        new
                        {
                            Id = -4,
                            Path = "sara@fakemail.net/picture4.jpg",
                            PostId = -2,
                            UserId = "871408aa-5382-4e3c-a6d0-66017d087c00"
                        },
                        new
                        {
                            Id = -5,
                            Path = "bertil@fakemail.net/picture5.jpg",
                            UserId = "cc194169-e1f2-48f9-8670-eba74673ba60"
                        });
                });

            modelBuilder.Entity("Group3.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AurthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(10000);

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AurthorId");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("TopicId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AurthorId = "871408aa-5382-4e3c-a6d0-66017d087c00",
                            Text = "<b>Visual Studio 6.0</b> news news news more news",
                            Time = new DateTime(2022, 8, 3, 14, 40, 40, 944, DateTimeKind.Local).AddTicks(4074),
                            TopicId = -1
                        },
                        new
                        {
                            Id = -2,
                            AurthorId = "1ddfc41a-8b0e-4dbd-8ef5-f94a552838d4",
                            Text = "My head is empty, should I fill it with something?",
                            Time = new DateTime(2022, 8, 2, 14, 40, 40, 946, DateTimeKind.Local).AddTicks(5405),
                            TopicId = -2
                        },
                        new
                        {
                            Id = -3,
                            AurthorId = "1ddfc41a-8b0e-4dbd-8ef5-f94a552838d4",
                            Text = "HoW do I make a table?",
                            Time = new DateTime(2022, 7, 30, 14, 40, 40, 946, DateTimeKind.Local).AddTicks(5486),
                            TopicId = -2
                        },
                        new
                        {
                            Id = -4,
                            AurthorId = "1ddfc41a-8b0e-4dbd-8ef5-f94a552838d4",
                            ReferenceId = -3,
                            Text = "I dont know",
                            Time = new DateTime(2022, 7, 31, 14, 40, 40, 946, DateTimeKind.Local).AddTicks(5492),
                            TopicId = -2
                        });
                });

            modelBuilder.Entity("Group3.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AurthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AurthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AurthorId = "1ddfc41a-8b0e-4dbd-8ef5-f94a552838d4",
                            CategoryId = -1,
                            Description = "Upgrade your project to 6.0",
                            Name = "Trending"
                        },
                        new
                        {
                            Id = -2,
                            AurthorId = "871408aa-5382-4e3c-a6d0-66017d087c00",
                            CategoryId = -2,
                            Description = "What ever about HTML",
                            Name = "HTML"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Group3.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("Group3.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.Chat", b =>
                {
                    b.HasOne("Group3.Models.Message", "Message")
                        .WithMany("Chats")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany("Chats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.Message", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "Aurthor")
                        .WithMany()
                        .HasForeignKey("AurthorId");
                });

            modelBuilder.Entity("Group3.Models.Picture", b =>
                {
                    b.HasOne("Group3.Models.Post", "Post")
                        .WithMany("Pictures")
                        .HasForeignKey("PostId");

                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany("Pictures")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Group3.Models.Post", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "Aurthor")
                        .WithMany("Posts")
                        .HasForeignKey("AurthorId");

                    b.HasOne("Group3.Models.Post", "Reference")
                        .WithMany()
                        .HasForeignKey("ReferenceId");

                    b.HasOne("Group3.Models.Topic", "Topic")
                        .WithMany("Posts")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.Topic", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "Aurthor")
                        .WithMany()
                        .HasForeignKey("AurthorId");

                    b.HasOne("Group3.Models.Category", "Category")
                        .WithMany("Topics")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
