// <auto-generated />
using System;
using Group3.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Group3.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220816204342_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Group3.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "fb84d6f4-7126-41b5-9278-a375210f6ead",
                            ConcurrencyStamp = "5fe57383-3d90-4564-a2a6-6e3a6e964dae",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "829110b9-32d1-4007-ba22-040555b2172c",
                            ConcurrencyStamp = "257c3037-750c-4e99-9dbf-125bab989065",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "0eefc918-792b-4d44-a3d6-e63b1cd92baf",
                            ConcurrencyStamp = "56ebf87d-5645-4ee2-9b04-4bc9ddd9b608",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        });
                });

            modelBuilder.Entity("Group3.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "f040d695-ecc6-4f1c-ab6e-6b2507b41f6c",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1964, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "309a8b3b-c944-4288-9d9c-3660e1f96e1c",
                            Email = "admin@fakemail.net",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            Location = "America",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@FAKEMAIL.NET",
                            NormalizedUserName = "ADMIN@FAKEMAIL.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEE1NNJKF+7MGYPXoahpdZXZcEijdeRPCQwTfly9kpRW7SCyj3eRTddeqq9pPF6RIKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80dc67b2-ac6d-468f-995b-cb358b9e1edb",
                            TwoFactorEnabled = false,
                            UserName = "admin@fakemail.net"
                        },
                        new
                        {
                            Id = "672a5735-5dc8-4358-bbe7-cde61342ac77",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1993, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "35810d4b-0e10-428f-96cf-22111a4a80c0",
                            Email = "sara@fakemail.net",
                            EmailConfirmed = false,
                            FirstName = "Sara",
                            LastName = "Svensson",
                            Location = "Danmark",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARA@FAKEMAIL.NET",
                            NormalizedUserName = "SARA@FAKEMAIL.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEFGCUbep0ggRZx+AIF+/qed5xJ74JDXZorkaN2nM6IPZw1LiL9a6wTxbgJCqb94V1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4e45acf1-b71c-4646-8f7d-fcfdab60d6f8",
                            TwoFactorEnabled = false,
                            UserName = "sara@fakemail.net"
                        },
                        new
                        {
                            Id = "e3d24956-8ef9-4458-b24a-f025ec4ecc5b",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1985, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4ab058d8-714a-4fc2-b472-2eedc7f420f6",
                            Email = "bertil@fakemail.net",
                            EmailConfirmed = false,
                            FirstName = "Bertil",
                            LastName = "Johansson",
                            Location = "Sweden",
                            LockoutEnabled = false,
                            NormalizedEmail = "BERTIL@FAKEMAIL.NET",
                            NormalizedUserName = "BERTIL@FAKEMAIL.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAECL7zj7XdnIuwAaMPR2+o18R3lvIe6mXw4SznQnK6m1Q0NsdqaG+URIhR97DScnp1g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ece69e6-271b-4a7a-a8c0-f889a7287986",
                            TwoFactorEnabled = false,
                            UserName = "bertil@fakemail.net"
                        });
                });

            modelBuilder.Entity("Group3.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "f040d695-ecc6-4f1c-ab6e-6b2507b41f6c",
                            RoleId = "fb84d6f4-7126-41b5-9278-a375210f6ead"
                        },
                        new
                        {
                            UserId = "672a5735-5dc8-4358-bbe7-cde61342ac77",
                            RoleId = "829110b9-32d1-4007-ba22-040555b2172c"
                        },
                        new
                        {
                            UserId = "e3d24956-8ef9-4458-b24a-f025ec4ecc5b",
                            RoleId = "0eefc918-792b-4d44-a3d6-e63b1cd92baf"
                        });
                });

            modelBuilder.Entity("Group3.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Description = "Breaking news here!",
                            Name = "News",
                            UserGroupId = 0
                        },
                        new
                        {
                            Id = -2,
                            Description = "Javascript, React and more.",
                            Name = "Frontend",
                            UserGroupId = 0
                        },
                        new
                        {
                            Id = -3,
                            Description = "C++ and C#",
                            Name = "Backend",
                            UserGroupId = 0
                        },
                        new
                        {
                            Id = -4,
                            Description = "En grupp av testare.",
                            Name = "Testgruppen",
                            UserGroupId = 0
                        });
                });

            modelBuilder.Entity("Group3.Models.Chat", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserId", "MessageId");

                    b.HasIndex("MessageId");

                    b.ToTable("Chats");

                    b.HasData(
                        new
                        {
                            UserId = "f040d695-ecc6-4f1c-ab6e-6b2507b41f6c",
                            MessageId = -1,
                            Id = -1
                        },
                        new
                        {
                            UserId = "672a5735-5dc8-4358-bbe7-cde61342ac77",
                            MessageId = -1,
                            Id = -1
                        },
                        new
                        {
                            UserId = "e3d24956-8ef9-4458-b24a-f025ec4ecc5b",
                            MessageId = -1,
                            Id = -1
                        },
                        new
                        {
                            UserId = "f040d695-ecc6-4f1c-ab6e-6b2507b41f6c",
                            MessageId = -2,
                            Id = -1
                        },
                        new
                        {
                            UserId = "672a5735-5dc8-4358-bbe7-cde61342ac77",
                            MessageId = -2,
                            Id = -1
                        },
                        new
                        {
                            UserId = "e3d24956-8ef9-4458-b24a-f025ec4ecc5b",
                            MessageId = -2,
                            Id = -1
                        },
                        new
                        {
                            UserId = "f040d695-ecc6-4f1c-ab6e-6b2507b41f6c",
                            MessageId = -3,
                            Id = -2
                        },
                        new
                        {
                            UserId = "672a5735-5dc8-4358-bbe7-cde61342ac77",
                            MessageId = -3,
                            Id = -2
                        },
                        new
                        {
                            UserId = "e3d24956-8ef9-4458-b24a-f025ec4ecc5b",
                            MessageId = -3,
                            Id = -2
                        },
                        new
                        {
                            UserId = "f040d695-ecc6-4f1c-ab6e-6b2507b41f6c",
                            MessageId = -4,
                            Id = -2
                        },
                        new
                        {
                            UserId = "672a5735-5dc8-4358-bbe7-cde61342ac77",
                            MessageId = -4,
                            Id = -2
                        },
                        new
                        {
                            UserId = "e3d24956-8ef9-4458-b24a-f025ec4ecc5b",
                            MessageId = -4,
                            Id = -2
                        },
                        new
                        {
                            UserId = "672a5735-5dc8-4358-bbe7-cde61342ac77",
                            MessageId = -5,
                            Id = -3
                        },
                        new
                        {
                            UserId = "e3d24956-8ef9-4458-b24a-f025ec4ecc5b",
                            MessageId = -5,
                            Id = -3
                        });
                });

            modelBuilder.Entity("Group3.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AurthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(10000);

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AurthorId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AurthorId = "f040d695-ecc6-4f1c-ab6e-6b2507b41f6c",
                            Text = "Hello Sara and Bertil my name is John!",
                            Time = new DateTime(2022, 8, 13, 22, 43, 42, 296, DateTimeKind.Local).AddTicks(8057)
                        },
                        new
                        {
                            Id = -2,
                            AurthorId = "672a5735-5dc8-4358-bbe7-cde61342ac77",
                            Text = "Hello John!",
                            Time = new DateTime(2022, 8, 14, 22, 43, 42, 296, DateTimeKind.Local).AddTicks(8849)
                        },
                        new
                        {
                            Id = -3,
                            AurthorId = "e3d24956-8ef9-4458-b24a-f025ec4ecc5b",
                            Text = "What's up??",
                            Time = new DateTime(2022, 8, 15, 22, 43, 42, 296, DateTimeKind.Local).AddTicks(8876)
                        },
                        new
                        {
                            Id = -4,
                            AurthorId = "f040d695-ecc6-4f1c-ab6e-6b2507b41f6c",
                            Text = "Umm..",
                            Time = new DateTime(2022, 8, 15, 22, 43, 42, 296, DateTimeKind.Local).AddTicks(8880)
                        },
                        new
                        {
                            Id = -5,
                            AurthorId = "e3d24956-8ef9-4458-b24a-f025ec4ecc5b",
                            Text = "Message from Bertil to Sara",
                            Time = new DateTime(2022, 8, 15, 22, 43, 42, 296, DateTimeKind.Local).AddTicks(8931)
                        });
                });

            modelBuilder.Entity("Group3.Models.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Pictures");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Path = "admin@fakemail.net/picture1.jpg",
                            UserId = "f040d695-ecc6-4f1c-ab6e-6b2507b41f6c"
                        },
                        new
                        {
                            Id = -2,
                            Path = "sara@fakemail.net/picture2.jpg",
                            UserId = "672a5735-5dc8-4358-bbe7-cde61342ac77"
                        },
                        new
                        {
                            Id = -3,
                            Path = "admin@fakemail.net/picture3.jpg",
                            UserId = "e3d24956-8ef9-4458-b24a-f025ec4ecc5b"
                        });
                });

            modelBuilder.Entity("Group3.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AurthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Reports")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(10000);

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("Votes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AurthorId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AurthorId = "672a5735-5dc8-4358-bbe7-cde61342ac77",
                            Reports = 0,
                            SubjectId = -2,
                            Text = "Is this version any good?",
                            Time = new DateTime(2022, 8, 14, 22, 43, 42, 294, DateTimeKind.Local).AddTicks(3371),
                            Votes = 1
                        },
                        new
                        {
                            Id = -2,
                            AurthorId = "f040d695-ecc6-4f1c-ab6e-6b2507b41f6c",
                            Reports = 2,
                            SubjectId = -2,
                            Text = "Maybe, but I'll stick with 2019!",
                            Time = new DateTime(2022, 8, 15, 22, 43, 42, 296, DateTimeKind.Local).AddTicks(5577),
                            Votes = 0
                        },
                        new
                        {
                            Id = -3,
                            AurthorId = "f040d695-ecc6-4f1c-ab6e-6b2507b41f6c",
                            Reports = 0,
                            SubjectId = -1,
                            Text = "How do I make a <b>table?</b>",
                            Time = new DateTime(2022, 8, 11, 22, 43, 42, 296, DateTimeKind.Local).AddTicks(5654),
                            Votes = 3
                        },
                        new
                        {
                            Id = -4,
                            AurthorId = "672a5735-5dc8-4358-bbe7-cde61342ac77",
                            Reports = 1,
                            SubjectId = -1,
                            Text = "I dont know..",
                            Time = new DateTime(2022, 8, 12, 22, 43, 42, 296, DateTimeKind.Local).AddTicks(5660),
                            Votes = 0
                        },
                        new
                        {
                            Id = -5,
                            AurthorId = "e3d24956-8ef9-4458-b24a-f025ec4ecc5b",
                            Reports = 0,
                            SubjectId = -1,
                            Text = "Me neither..",
                            Time = new DateTime(2022, 8, 16, 19, 43, 42, 296, DateTimeKind.Local).AddTicks(5664),
                            Votes = 1
                        },
                        new
                        {
                            Id = -6,
                            AurthorId = "672a5735-5dc8-4358-bbe7-cde61342ac77",
                            Reports = 0,
                            SubjectId = -3,
                            Text = "WoW first post?!?",
                            Time = new DateTime(2019, 8, 16, 22, 43, 42, 296, DateTimeKind.Local).AddTicks(5685),
                            Votes = 1
                        },
                        new
                        {
                            Id = -7,
                            AurthorId = "f040d695-ecc6-4f1c-ab6e-6b2507b41f6c",
                            EventDate = new DateTime(2022, 8, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            Reports = 0,
                            SubjectId = -4,
                            Text = "Site launch.<br><br>Day for site launch. We will see if it is possible to host the site on freeasphosting.net",
                            Time = new DateTime(2022, 8, 9, 22, 43, 42, 296, DateTimeKind.Local).AddTicks(5716),
                            Votes = 0
                        },
                        new
                        {
                            Id = -8,
                            AurthorId = "f040d695-ecc6-4f1c-ab6e-6b2507b41f6c",
                            EventDate = new DateTime(2022, 8, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            Reports = 0,
                            SubjectId = -5,
                            Text = "Site presentation.<br><br>Day for presentation. Our project was to create a community portal for an organization, including a news feed, events, member lists and discussion forums. ",
                            Time = new DateTime(2022, 8, 9, 22, 43, 42, 296, DateTimeKind.Local).AddTicks(6148),
                            Votes = 0
                        },
                        new
                        {
                            Id = -9,
                            AurthorId = "672a5735-5dc8-4358-bbe7-cde61342ac77",
                            Reports = 0,
                            SubjectId = -6,
                            Text = "What should we talk about in our user group test forum?",
                            Time = new DateTime(2022, 8, 14, 22, 43, 42, 296, DateTimeKind.Local).AddTicks(6178),
                            Votes = 0
                        },
                        new
                        {
                            Id = -10,
                            AurthorId = "e3d24956-8ef9-4458-b24a-f025ec4ecc5b",
                            Reports = 0,
                            SubjectId = -6,
                            Text = "Anything.",
                            Time = new DateTime(2022, 8, 15, 22, 43, 42, 296, DateTimeKind.Local).AddTicks(6182),
                            Votes = 0
                        });
                });

            modelBuilder.Entity("Group3.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AurthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<string>("UrlSlug")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AurthorId");

                    b.HasIndex("TopicId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AurthorId = "f040d695-ecc6-4f1c-ab6e-6b2507b41f6c",
                            Name = "HTML Tables?",
                            TopicId = -2
                        },
                        new
                        {
                            Id = -2,
                            AurthorId = "672a5735-5dc8-4358-bbe7-cde61342ac77",
                            Name = "Visual Studio 2022",
                            TopicId = -1,
                            UrlSlug = "Visual-Studio-2022"
                        },
                        new
                        {
                            Id = -3,
                            AurthorId = "672a5735-5dc8-4358-bbe7-cde61342ac77",
                            Name = "Am I'm the chosen one?",
                            TopicId = -3
                        },
                        new
                        {
                            Id = -4,
                            AurthorId = "f040d695-ecc6-4f1c-ab6e-6b2507b41f6c",
                            Name = "Site launch",
                            TopicId = -5,
                            UrlSlug = "Site-launch"
                        },
                        new
                        {
                            Id = -5,
                            AurthorId = "f040d695-ecc6-4f1c-ab6e-6b2507b41f6c",
                            Name = "Site presentation",
                            TopicId = -5,
                            UrlSlug = "Site-presentation"
                        },
                        new
                        {
                            Id = -6,
                            AurthorId = "672a5735-5dc8-4358-bbe7-cde61342ac77",
                            Name = "What?.",
                            TopicId = -6
                        });
                });

            modelBuilder.Entity("Group3.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AurthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AurthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AurthorId = "f040d695-ecc6-4f1c-ab6e-6b2507b41f6c",
                            CategoryId = -1,
                            Description = "What's hot right now?",
                            Name = "Trending"
                        },
                        new
                        {
                            Id = -2,
                            AurthorId = "f040d695-ecc6-4f1c-ab6e-6b2507b41f6c",
                            CategoryId = -2,
                            Description = "Tag TAG <b>TAG!</b>",
                            Name = "HTML"
                        },
                        new
                        {
                            Id = -3,
                            AurthorId = "672a5735-5dc8-4358-bbe7-cde61342ac77",
                            CategoryId = -2,
                            Description = "The necessary evil?",
                            Name = "CSS"
                        },
                        new
                        {
                            Id = -4,
                            AurthorId = "672a5735-5dc8-4358-bbe7-cde61342ac77",
                            CategoryId = -3,
                            Description = "Because SQL is even worse.",
                            Name = "Entity Framework"
                        },
                        new
                        {
                            Id = -5,
                            AurthorId = "f040d695-ecc6-4f1c-ab6e-6b2507b41f6c",
                            CategoryId = -1,
                            Description = "Planned occasions.",
                            Name = "Events"
                        },
                        new
                        {
                            Id = -6,
                            AurthorId = "672a5735-5dc8-4358-bbe7-cde61342ac77",
                            CategoryId = -4,
                            Description = "For random testing.",
                            Name = "User Group Test"
                        },
                        new
                        {
                            Id = -7,
                            AurthorId = "f040d695-ecc6-4f1c-ab6e-6b2507b41f6c",
                            CategoryId = -1,
                            Description = "Backend news",
                            Name = "Backend"
                        },
                        new
                        {
                            Id = -8,
                            AurthorId = "f040d695-ecc6-4f1c-ab6e-6b2507b41f6c",
                            CategoryId = -1,
                            Description = "News about frontend subjects",
                            Name = "Frontend"
                        },
                        new
                        {
                            Id = -9,
                            AurthorId = "f040d695-ecc6-4f1c-ab6e-6b2507b41f6c",
                            CategoryId = -1,
                            Description = "Other news",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("Group3.Models.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.ToTable("UserGroups");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CategoryId = -4
                        });
                });

            modelBuilder.Entity("Group3.Models.UserGroupEnlistment", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("UserId", "UserGroupId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("UserGroupEnlistments");

                    b.HasData(
                        new
                        {
                            UserId = "f040d695-ecc6-4f1c-ab6e-6b2507b41f6c",
                            UserGroupId = -1,
                            Id = -1
                        },
                        new
                        {
                            UserId = "e3d24956-8ef9-4458-b24a-f025ec4ecc5b",
                            UserGroupId = -1,
                            Id = -2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Group3.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("Group3.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.Chat", b =>
                {
                    b.HasOne("Group3.Models.Message", "Message")
                        .WithMany("Chats")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany("Chats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.Message", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "Aurthor")
                        .WithMany()
                        .HasForeignKey("AurthorId");
                });

            modelBuilder.Entity("Group3.Models.Picture", b =>
                {
                    b.HasOne("Group3.Models.Post", null)
                        .WithMany("Pictures")
                        .HasForeignKey("PostId");

                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany("Pictures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Group3.Models.Post", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "Aurthor")
                        .WithMany("Posts")
                        .HasForeignKey("AurthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Group3.Models.Subject", "Subject")
                        .WithMany("Posts")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.Subject", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "Aurthor")
                        .WithMany()
                        .HasForeignKey("AurthorId");

                    b.HasOne("Group3.Models.Topic", "Topic")
                        .WithMany("Subjects")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.Topic", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "Aurthor")
                        .WithMany()
                        .HasForeignKey("AurthorId");

                    b.HasOne("Group3.Models.Category", "Category")
                        .WithMany("Topics")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.UserGroup", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", null)
                        .WithMany("UserGroups")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Group3.Models.Category", "Category")
                        .WithOne("UserGroup")
                        .HasForeignKey("Group3.Models.UserGroup", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.UserGroupEnlistment", b =>
                {
                    b.HasOne("Group3.Models.UserGroup", "UserGroup")
                        .WithMany("UserGroupEnlistments")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany("UserGroupEnlistments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
