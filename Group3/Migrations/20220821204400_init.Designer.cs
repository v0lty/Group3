// <auto-generated />
using System;
using Group3.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Group3.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220821204400_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Group3.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "fc43b598-9198-4c71-8a1e-0d5cf76a89c6",
                            ConcurrencyStamp = "58d07abb-83b1-40bc-be76-65af4ea21381",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "1c9ceab9-5128-47f0-a3d4-c897bbbacfde",
                            ConcurrencyStamp = "47683e54-bb97-40c8-913c-b378578c08d4",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "5d845df1-891b-4c4a-b842-45cc2e61a062",
                            ConcurrencyStamp = "0ed1896b-e248-4ed1-89fa-7bc5c55d879f",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        });
                });

            modelBuilder.Entity("Group3.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "21f94a80-8673-4807-aba9-60f7b0250293",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1964, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "21c471ba-cd3e-4642-b809-80af0491325b",
                            Email = "admin@fakemail.net",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            Location = "America",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@FAKEMAIL.NET",
                            NormalizedUserName = "ADMIN@FAKEMAIL.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEExOFAkTB6ErMQWZK4ZYZbdyyGfCcMSkp71KMS2vP8GLmja6Ic5NqNBNrpR4NRMEmg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36998398-657c-4e39-8a43-5747dc90d458",
                            TwoFactorEnabled = false,
                            UserName = "admin@fakemail.net"
                        },
                        new
                        {
                            Id = "abc95e0f-15ea-4558-8485-d8c87b7677c8",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1993, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "74c25336-f581-4088-8221-8d699d77bbeb",
                            Email = "sara@fakemail.net",
                            EmailConfirmed = false,
                            FirstName = "Sara",
                            LastName = "Svensson",
                            Location = "Danmark",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARA@FAKEMAIL.NET",
                            NormalizedUserName = "SARA@FAKEMAIL.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEG64dKQIQmqrv+0Ob8/JO9tONN6ttElzj+ozuK+3jiIMkqw9J7YBUIS1/CTE418ygg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ba4ef3f-f31a-46fe-88f6-6bc9fbbca7f0",
                            TwoFactorEnabled = false,
                            UserName = "sara@fakemail.net"
                        },
                        new
                        {
                            Id = "268f2d5f-0bd0-4e51-b3ba-ce653eab541b",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1985, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "acc1a547-8ca2-405a-ba5f-76bacf389574",
                            Email = "bertil@fakemail.net",
                            EmailConfirmed = false,
                            FirstName = "Bertil",
                            LastName = "Johansson",
                            Location = "Sweden",
                            LockoutEnabled = false,
                            NormalizedEmail = "BERTIL@FAKEMAIL.NET",
                            NormalizedUserName = "BERTIL@FAKEMAIL.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEFVK1nuE0rHPfIhvSGsl/xj9H5H/GWcTMvX9oXiAthgAi2oNT2AEJrWpFSCBcXZiug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dedd24d6-80e0-4b3c-bf4b-4258e9fc4c99",
                            TwoFactorEnabled = false,
                            UserName = "bertil@fakemail.net"
                        });
                });

            modelBuilder.Entity("Group3.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            RoleId = "fc43b598-9198-4c71-8a1e-0d5cf76a89c6"
                        },
                        new
                        {
                            UserId = "abc95e0f-15ea-4558-8485-d8c87b7677c8",
                            RoleId = "1c9ceab9-5128-47f0-a3d4-c897bbbacfde"
                        },
                        new
                        {
                            UserId = "268f2d5f-0bd0-4e51-b3ba-ce653eab541b",
                            RoleId = "5d845df1-891b-4c4a-b842-45cc2e61a062"
                        });
                });

            modelBuilder.Entity("Group3.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Description = "Breaking news here!",
                            Name = "News",
                            UserGroupId = 0
                        },
                        new
                        {
                            Id = -2,
                            Description = "Javascript, React and more.",
                            Name = "Frontend",
                            UserGroupId = 0
                        },
                        new
                        {
                            Id = -3,
                            Description = "C++ and C#",
                            Name = "Backend",
                            UserGroupId = 0
                        },
                        new
                        {
                            Id = -4,
                            Description = "En grupp av testare.",
                            Name = "Testgruppen",
                            UserGroupId = 0
                        },
                        new
                        {
                            Id = -5,
                            Description = "Systems, programs & other tools for software development.",
                            Name = "Systems",
                            UserGroupId = 0
                        },
                        new
                        {
                            Id = -6,
                            Description = "Our own projects and ideas.",
                            Name = "Projects",
                            UserGroupId = 0
                        },
                        new
                        {
                            Id = -7,
                            Description = "Anything else.",
                            Name = "Other",
                            UserGroupId = 0
                        });
                });

            modelBuilder.Entity("Group3.Models.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MessageAuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MessageConversationId")
                        .HasColumnType("int");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("MessageAuthorId", "MessageConversationId");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("Group3.Models.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Conversations");

                    b.HasData(
                        new
                        {
                            Id = -1
                        },
                        new
                        {
                            Id = -2
                        },
                        new
                        {
                            Id = -3
                        });
                });

            modelBuilder.Entity("Group3.Models.ConversationParticipation", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("UserId", "ConversationId");

                    b.HasIndex("ConversationId");

                    b.ToTable("ConversationParticipations");

                    b.HasData(
                        new
                        {
                            UserId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            ConversationId = -1,
                            Id = -1
                        },
                        new
                        {
                            UserId = "abc95e0f-15ea-4558-8485-d8c87b7677c8",
                            ConversationId = -1,
                            Id = -2
                        },
                        new
                        {
                            UserId = "268f2d5f-0bd0-4e51-b3ba-ce653eab541b",
                            ConversationId = -1,
                            Id = -3
                        },
                        new
                        {
                            UserId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            ConversationId = -2,
                            Id = -4
                        },
                        new
                        {
                            UserId = "abc95e0f-15ea-4558-8485-d8c87b7677c8",
                            ConversationId = -2,
                            Id = -5
                        },
                        new
                        {
                            UserId = "268f2d5f-0bd0-4e51-b3ba-ce653eab541b",
                            ConversationId = -2,
                            Id = -6
                        },
                        new
                        {
                            UserId = "abc95e0f-15ea-4558-8485-d8c87b7677c8",
                            ConversationId = -3,
                            Id = -7
                        },
                        new
                        {
                            UserId = "268f2d5f-0bd0-4e51-b3ba-ce653eab541b",
                            ConversationId = -3,
                            Id = -8
                        });
                });

            modelBuilder.Entity("Group3.Models.Message", b =>
                {
                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(10000);

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("AuthorId", "ConversationId");

                    b.HasIndex("ConversationId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            AuthorId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            ConversationId = -1,
                            Id = -1,
                            Text = "Hello Sara and Bertil my name is John!",
                            Time = new DateTime(2022, 8, 18, 22, 43, 59, 671, DateTimeKind.Local).AddTicks(7845)
                        },
                        new
                        {
                            AuthorId = "abc95e0f-15ea-4558-8485-d8c87b7677c8",
                            ConversationId = -1,
                            Id = -2,
                            Text = "Hello John!",
                            Time = new DateTime(2022, 8, 19, 22, 43, 59, 671, DateTimeKind.Local).AddTicks(8366)
                        },
                        new
                        {
                            AuthorId = "268f2d5f-0bd0-4e51-b3ba-ce653eab541b",
                            ConversationId = -2,
                            Id = -3,
                            Text = "What's up??",
                            Time = new DateTime(2022, 8, 20, 22, 43, 59, 671, DateTimeKind.Local).AddTicks(8388)
                        },
                        new
                        {
                            AuthorId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            ConversationId = -2,
                            Id = -4,
                            Text = "Umm..",
                            Time = new DateTime(2022, 8, 20, 22, 43, 59, 671, DateTimeKind.Local).AddTicks(8391)
                        },
                        new
                        {
                            AuthorId = "268f2d5f-0bd0-4e51-b3ba-ce653eab541b",
                            ConversationId = -3,
                            Id = -5,
                            Text = "Message from Bertil to Sara",
                            Time = new DateTime(2022, 8, 20, 22, 43, 59, 671, DateTimeKind.Local).AddTicks(8393)
                        });
                });

            modelBuilder.Entity("Group3.Models.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Pictures");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Path = "admin@fakemail.net/picture1.jpg",
                            UserId = "21f94a80-8673-4807-aba9-60f7b0250293"
                        },
                        new
                        {
                            Id = -2,
                            Path = "sara@fakemail.net/picture2.jpg",
                            UserId = "abc95e0f-15ea-4558-8485-d8c87b7677c8"
                        },
                        new
                        {
                            Id = -3,
                            Path = "bertil@fakemail.net/picture3.jpg",
                            UserId = "268f2d5f-0bd0-4e51-b3ba-ce653eab541b"
                        });
                });

            modelBuilder.Entity("Group3.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Reports")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(10000);

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("Votes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AuthorId = "abc95e0f-15ea-4558-8485-d8c87b7677c8",
                            Reports = 0,
                            SubjectId = -2,
                            Text = "Is this version any good?",
                            Time = new DateTime(2022, 8, 19, 22, 43, 59, 669, DateTimeKind.Local).AddTicks(3076),
                            Votes = 1
                        },
                        new
                        {
                            Id = -2,
                            AuthorId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            Reports = 2,
                            SubjectId = -2,
                            Text = "Maybe, but I'll stick with 2019!",
                            Time = new DateTime(2022, 8, 20, 22, 43, 59, 671, DateTimeKind.Local).AddTicks(4144),
                            Votes = 0
                        },
                        new
                        {
                            Id = -3,
                            AuthorId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            Reports = 0,
                            SubjectId = -1,
                            Text = "How do I make a <b>table?</b>",
                            Time = new DateTime(2022, 8, 16, 22, 43, 59, 671, DateTimeKind.Local).AddTicks(4226),
                            Votes = 3
                        },
                        new
                        {
                            Id = -4,
                            AuthorId = "abc95e0f-15ea-4558-8485-d8c87b7677c8",
                            Reports = 1,
                            SubjectId = -1,
                            Text = "I dont know..",
                            Time = new DateTime(2022, 8, 17, 22, 43, 59, 671, DateTimeKind.Local).AddTicks(4232),
                            Votes = 0
                        },
                        new
                        {
                            Id = -5,
                            AuthorId = "268f2d5f-0bd0-4e51-b3ba-ce653eab541b",
                            Reports = 0,
                            SubjectId = -1,
                            Text = "Me neither..",
                            Time = new DateTime(2022, 8, 21, 19, 43, 59, 671, DateTimeKind.Local).AddTicks(4234),
                            Votes = 1
                        },
                        new
                        {
                            Id = -6,
                            AuthorId = "abc95e0f-15ea-4558-8485-d8c87b7677c8",
                            Reports = 0,
                            SubjectId = -3,
                            Text = "WoW first post?!?",
                            Time = new DateTime(2019, 8, 21, 22, 43, 59, 671, DateTimeKind.Local).AddTicks(4253),
                            Votes = 1
                        },
                        new
                        {
                            Id = -7,
                            AuthorId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            EventDate = new DateTime(2022, 8, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            Reports = 0,
                            SubjectId = -4,
                            Text = "Day for site launch. We will see if it is possible to host the site on freeasphosting.net",
                            Time = new DateTime(2022, 8, 14, 22, 43, 59, 671, DateTimeKind.Local).AddTicks(4279),
                            Votes = 0
                        },
                        new
                        {
                            Id = -8,
                            AuthorId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            EventDate = new DateTime(2022, 8, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            Reports = 0,
                            SubjectId = -5,
                            Text = "Day for presentation. Our project was to create a community portal for an organization, including a news feed, events, member lists and discussion forums. ",
                            Time = new DateTime(2022, 8, 14, 22, 43, 59, 671, DateTimeKind.Local).AddTicks(4717),
                            Votes = 0
                        },
                        new
                        {
                            Id = -9,
                            AuthorId = "abc95e0f-15ea-4558-8485-d8c87b7677c8",
                            Reports = 0,
                            SubjectId = -6,
                            Text = "What should we talk about in our user group test forum?",
                            Time = new DateTime(2022, 8, 19, 22, 43, 59, 671, DateTimeKind.Local).AddTicks(4739),
                            Votes = 0
                        },
                        new
                        {
                            Id = -10,
                            AuthorId = "268f2d5f-0bd0-4e51-b3ba-ce653eab541b",
                            Reports = 0,
                            SubjectId = -6,
                            Text = "Anything.",
                            Time = new DateTime(2022, 8, 20, 22, 43, 59, 671, DateTimeKind.Local).AddTicks(4742),
                            Votes = 0
                        },
                        new
                        {
                            Id = -11,
                            AuthorId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            EventDate = new DateTime(2022, 8, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            Reports = 0,
                            SubjectId = -7,
                            Text = "We will celebrate the completion of  our studies with a Say Hello Party on Tuesday 2022-08-23. We're starting a new category that we're naming Other. In that category, we create a topic that we call random talk. In that topic we start a 'Say Hello Party' subject. We will invite the students in the other groups to our forum. If they want, they can register and can contribute a hello in our 'Say Hello Party'.",
                            Time = new DateTime(2022, 8, 15, 22, 43, 59, 671, DateTimeKind.Local).AddTicks(4745),
                            Votes = 0
                        });
                });

            modelBuilder.Entity("Group3.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<string>("UrlSlug")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TopicId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AuthorId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            Name = "HTML Tables?",
                            TopicId = -2
                        },
                        new
                        {
                            Id = -2,
                            AuthorId = "abc95e0f-15ea-4558-8485-d8c87b7677c8",
                            Name = "Visual Studio 2022",
                            TopicId = -1,
                            UrlSlug = "Visual-Studio-2022"
                        },
                        new
                        {
                            Id = -3,
                            AuthorId = "abc95e0f-15ea-4558-8485-d8c87b7677c8",
                            Name = "Am I'm the chosen one?",
                            TopicId = -3
                        },
                        new
                        {
                            Id = -4,
                            AuthorId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            Name = "Site launch",
                            TopicId = -5,
                            UrlSlug = "Site-launch"
                        },
                        new
                        {
                            Id = -5,
                            AuthorId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            Name = "Site presentation",
                            TopicId = -5,
                            UrlSlug = "Site-presentation"
                        },
                        new
                        {
                            Id = -6,
                            AuthorId = "abc95e0f-15ea-4558-8485-d8c87b7677c8",
                            Name = "What?.",
                            TopicId = -6
                        },
                        new
                        {
                            Id = -7,
                            AuthorId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            Name = "Say Hello Party",
                            TopicId = -5,
                            UrlSlug = "Say-Hello-Party"
                        });
                });

            modelBuilder.Entity("Group3.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AuthorId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            CategoryId = -1,
                            Description = "What's hot right now?",
                            Name = "Trending"
                        },
                        new
                        {
                            Id = -2,
                            AuthorId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            CategoryId = -2,
                            Description = "Tag TAG <b>TAG!</b>",
                            Name = "HTML"
                        },
                        new
                        {
                            Id = -3,
                            AuthorId = "abc95e0f-15ea-4558-8485-d8c87b7677c8",
                            CategoryId = -2,
                            Description = "The necessary evil?",
                            Name = "CSS"
                        },
                        new
                        {
                            Id = -4,
                            AuthorId = "abc95e0f-15ea-4558-8485-d8c87b7677c8",
                            CategoryId = -3,
                            Description = "Because SQL is even worse.",
                            Name = "Entity Framework"
                        },
                        new
                        {
                            Id = -5,
                            AuthorId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            CategoryId = -1,
                            Description = "Planned occasions.",
                            Name = "Events"
                        },
                        new
                        {
                            Id = -6,
                            AuthorId = "abc95e0f-15ea-4558-8485-d8c87b7677c8",
                            CategoryId = -4,
                            Description = "For random testing.",
                            Name = "User Group Test"
                        },
                        new
                        {
                            Id = -7,
                            AuthorId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            CategoryId = -1,
                            Description = "Backend news",
                            Name = "Backend"
                        },
                        new
                        {
                            Id = -8,
                            AuthorId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            CategoryId = -1,
                            Description = "News about frontend subjects",
                            Name = "Frontend"
                        },
                        new
                        {
                            Id = -9,
                            AuthorId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            CategoryId = -1,
                            Description = "Other news",
                            Name = "Other"
                        },
                        new
                        {
                            Id = -10,
                            AuthorId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            CategoryId = -5,
                            Description = "A 3D computer graphics game engine developed by Epic Games.",
                            Name = "Unreal Engine"
                        },
                        new
                        {
                            Id = -11,
                            AuthorId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            CategoryId = -6,
                            Description = "About developing this very forum.",
                            Name = "This Forum"
                        },
                        new
                        {
                            Id = -12,
                            AuthorId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            CategoryId = -7,
                            Description = "Computer games.",
                            Name = "Games"
                        },
                        new
                        {
                            Id = -13,
                            AuthorId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            CategoryId = -7,
                            Description = "Where we can talk about anything.",
                            Name = "Random Talk"
                        });
                });

            modelBuilder.Entity("Group3.Models.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.ToTable("UserGroups");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CategoryId = -4
                        });
                });

            modelBuilder.Entity("Group3.Models.UserGroupEnlistment", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("UserId", "UserGroupId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("UserGroupEnlistments");

                    b.HasData(
                        new
                        {
                            UserId = "21f94a80-8673-4807-aba9-60f7b0250293",
                            UserGroupId = -1,
                            Id = -1
                        },
                        new
                        {
                            UserId = "268f2d5f-0bd0-4e51-b3ba-ce653eab541b",
                            UserGroupId = -1,
                            Id = -2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Group3.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("Group3.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.Chat", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany("Chats")
                        .HasForeignKey("UserId");

                    b.HasOne("Group3.Models.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageAuthorId", "MessageConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.ConversationParticipation", b =>
                {
                    b.HasOne("Group3.Models.Conversation", "Conversation")
                        .WithMany("ConversationParticipations")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany("ConversationParticipations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.Message", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "Author")
                        .WithMany("Messages")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Group3.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.Picture", b =>
                {
                    b.HasOne("Group3.Models.Post", null)
                        .WithMany("Pictures")
                        .HasForeignKey("PostId");

                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany("Pictures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Group3.Models.Post", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Group3.Models.Subject", "Subject")
                        .WithMany("Posts")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.Subject", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("Group3.Models.Topic", "Topic")
                        .WithMany("Subjects")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.Topic", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("Group3.Models.Category", "Category")
                        .WithMany("Topics")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.UserGroup", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", null)
                        .WithMany("UserGroups")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Group3.Models.Category", "Category")
                        .WithOne("UserGroup")
                        .HasForeignKey("Group3.Models.UserGroup", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group3.Models.UserGroupEnlistment", b =>
                {
                    b.HasOne("Group3.Models.UserGroup", "UserGroup")
                        .WithMany("UserGroupEnlistments")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Group3.Models.ApplicationUser", "User")
                        .WithMany("UserGroupEnlistments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Group3.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
